PROBLEM:


Given a string S consisting of uppercase alphabetic characters. Return the  number of different substrings of size 2 that appear in S as contiguous substrings.

Input:
The first line contains 'T' denoting the number of testcases. Then follows description of test cases. The next T lines contains the string S.

Output:
Output the number of different substrings of size 2 in S.


Constraints:
1<=T<=50
1<=|S|<=100


Example:
Input :
2
ABCAB
XYZ

Output :
3
2

Explanation:  For "ABCAB", the three distinct substrings of size 2 are "AB", "BC" and "CA".  For "XYZ", the two distinct substrings of size 2 are "XY" and "YZ".



SOLUTION:


JAVA CODE:


/*package whatever //do not write package name here */

import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
	public static void main (String[] args) {
		//code
		
		Scanner sc=new Scanner(System.in);
		int t=sc.nextInt();
		
		
		while(t--!=0)
		{
		    String str=sc.next();
		    int l=str.length();
		    
		    HashSet<String> hs=new HashSet<>();
		    for(int i=0;i<l-1;i++)
		    {
		        hs.add(str.substring(i,i+2));
		        
		    }
		    System.out.println(hs.size());
		}
	}
}
