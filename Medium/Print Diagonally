PROBLEM:


Give a N*N square matrix, return an array of its anti-diagonals. Look at the example for more details.

For Example:
If the matrix is    

1 2 3
4 5 6
7 8 9
The output should Return the following :

[ 
  [1],
  [2, 4],
  [3, 5, 7],
  [6, 8],
  [9]
]
i.e print the elements of array diagonally.

Note: The input array given is in single line and you have to output the answer in one line only.

 

Input:

The first line contains an integer T, depicting total number of test cases. 
Then following T lines contains an integer N depicting the size of square matrix and next line followed by the value of array.


Output:

Print the elements of matrix diagonally in separate line.


Constraints:

1 ≤ T ≤ 30
1 ≤ N ≤ 20
0 ≤ A[i][j] ≤ 9


Example:

Input:
2
2
1 2 3 4
3
1 2 3 4 5 6 7 8 9
Output:
1 2 3 4
1 2 4 3 5 7 6 8 9




SOLUTION:


JAVA CODE:


import java.util.*;
import java.lang.*;
import java.io.*;
class GFG
 {
	public static void main (String[] args)
	 {
	    Scanner sc = new Scanner(System.in);
	    int t = sc.nextInt();
	    while(t-->0)
	    {
	        int n = sc.nextInt();
	        int[][] arr = new int[n][n];
	        for(int i=0;i<n;i++)
	        {
	            for(int j=0;j<n;j++)
	            {
	                arr[i][j] = sc.nextInt();
	            }
	        }
	        for(int i=0;i<n;i++)
	        {
	            int column = i;
	            int row = 0;
	            while(row<n && column>=0)
	            {
	                System.out.print(arr[row][column]+" ");
	                row++;
	                column--;
	            }
	        }
	        for(int i=1;i<n;i++)
	        {
	            int column = n-1;
	            int row = i;
	            while(row<n && column>=0)
	            {
	                System.out.print(arr[row][column]+" ");
	                row++;
	                column--;
	            }
	        }
	        System.out.println();
	    }
	 }
}
