PROBLEM:


Given a singly linked list and a number k. Write a function to find the (N/k)th element, where N is the number of elements in the list. We need to consider ceil value in case of decimals.

Input:
The first line of input contains an integer T denoting the number of test cases. The first line of each test case consists of an integer N. The second line consists of N spaced integers.The last line consists of an integer k.

Output:
Print the data value of (N/k)th node in the Linked List.

User Task:
The task is to complete the function fractional_node() which should find the n/kth node in the linked list and return its data value.

Constraints: 
1 <= T <= 100
1 <= N <= 100

Example:
Input:
2
6
1 2 3 4 5 6
2
5
2 7 9 3 5
3

Output:
3
7

Explanation:
Testcase 1: 6/2th element is the 3rd(1-based indexing) element which is 3.



SOLUTION:


JAVA CODE:



class GfG
{
    public static int nknode(Node head, int k)
    {
       Node fast, slow;
    slow = fast = head;
   
    int ctr=1;
    while(fast.next!=null){
        fast = fast.next;
        slow =(ctr++%k==0)?slow.next:slow;
    }
    return slow.data;
    }
}
